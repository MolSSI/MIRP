/*! \page building Building MIRP from Source

\section _build_requirements Requirements

\todo Intel 2016 needs testing

- C/C++ compiler (supporting C++11)
  - GCC: 4.9 or greater
  - Intel 2016 or greater
  - Clang 4.0 or greater

- CMake (http://cmake.org)
  - v3.2 or greater

- Arb v2.11.1 (http://arblib.org)
- Flint v2.5.2 (http://flintlib.org)
- MPFR v3.1.5 (http://mpfr.org)
- GMP 6.1.2 (http://gmplib.org)
  - MPIR (http://mpir.org) may work, but is untested

\note The versions given for Arb, Flint, MPFR, and GMP are the lowest
versions that MIRP has been tested with. Other versions are likely
to work (particularly for GMP and MPFR).

See \ref _build_buildingdeps for some info on building the dependencies,
or \ref binaries for how to obtain dependencies in binary form.


\section _build_building Building and Installing MIRP

MIRP is built with CMake, and in general uses the standard options.
No files are modified within the source tree, so multiple out-of-source
builds can share the same source directory.

The most common options are:

- **CMAKE_BUILD_TYPE**     - Set to `Release`, `Debug`, or `RelWithDebInfo`.
- **CMAKE_C_COMPILER**     - Which compiler to use for building C source files
                             (ie, `icc`, `/usr/bin/gcc`, etc)
- **CMAKE_CXX_COMPILER**   - Which compiler to use for building C++ source files
                             (ie, `icpc`, `/usr/bin/g++`, etc)
- **CMAKE_INSTALL_PREFIX** - Destination for installing MIRP
- **CMAKE_PREFIX_PATH**    - Extra paths to search for dependencies (like those listed
                             above). This path is expected to have subdirectories
                             such as `bin`, `share`, etc.

Other MIRP-specific options:

- **MIRP_OPENMP** - Enable/disables OpenMP. If enabled, some operations in
                    computing all the components of an integral and in the
                    general contraction parts will be threaded. By default,
                    threading is not enabled.

- **MIRP_STATIC** - Statically link external libraries to executables as much
                    as possible (particularly libstdc++, etc)


An example of configuring, building, and installing:

\code{.sh}
cd /path/to/mirp
mkdir build
cd build
cmake -DCMAKE_BUILD_TYPE=Release \
      -DCMAKE_C_COMPILER=gcc -DCMAKE_CXX_COMPILER=g++ \
      -DCMAKE_PREFIX_PATH=/path/to/mirp_deps \
      -DCMAKE_INSTALL_PREFIX=/home/user/mirp_install \
      -DMIRP_OPENMP=True \
      ../
ctest
make install
\endcode


\section _build_testing Testing MIRP

Testing of the library is done using the `ctest` command. The tests
are designed to thoroughly cover all the functionality of the library.

Currently, the tests take less than 5 minutes on reasonably modern hardware.

If you have a failing test, please file a bug report using
<a href="https://github.com/MolSSI/MIRP/issues">github issues</a> or by
emailing the main author directly.

\section _build_buildingdeps Building Dependencies

There is a helper script in the `build_scripts` directory of MIRP. The
script is called `build_deps.sh` and takes a single argument specifying
the architecture (for gcc's `-march` option). If you are unsure what to use,
and you are compiling this on the same architecture you are going to use MIRP on,
use "native".

This script will download and compile the dependencies using GCC (which must be
in your path). It will create a directory within the current working directory
named `mirp_deps_${arch}` where `${arch}` is the argument you gave to `build_deps.sh`.
This directory should then be included in the `CMAKE_PREFIX_PATH` for MIRP.

The current working directory will be used to store the downloaded files. Compilation
will take place in a subdirectory `deps_build_${arch}`.

The script is fairly rudimentary, so feel free to modify as you with for your
own purposes.

For example, here could be a complete workflow for downloading/compiling MIRP
from scratch:

\include build_install_1.sh


*/
